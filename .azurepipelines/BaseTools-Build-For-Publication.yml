# File BaseTools-Build-For-Publication.yml
#
# Azure Pipeline to construct the final Nuget package for a binary release
# of BaseTools.
#
# Copyright (C) Microsoft Corporation
# SPDX-License-Identifier: BSD-2-Clause-Patent
##
name: BaseTools_Bin_$(release_version)_$(Rev:r)

variables:
  linux_build_output_path: '$(Build.Repository.LocalPath)/BaseTools/Source/C/bin'
  linux_artifact_name: 'LinuxOutput'
  windows_build_output_path: '$(Build.Repository.LocalPath)\BaseTools\Bin\Win32'
  windows_artifact_name: 'WindowsOutput'
  temp_publication_directory: 'PackageStaging'
  package_artifact_name: 'NugetReleasePackage'

jobs:
  - job: linux_build
    displayName: Linux Build
    pool:
      vmImage: ubuntu-latest

    workspace:
      clean: all

    steps:
    - checkout: self
      clean: true
  
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7.x'
        architecture: 'x64'
      displayName: Install correct Python

    - script: pip install -r requirements.txt --upgrade
      displayName: 'Install/Upgrade pip modules'

    # Set default
    - bash: |
        echo "##vso[task.setvariable variable=pkg_count]${{ 1 }}"

    - task: CmdLine@1
      displayName: Update Environment
      inputs:
        filename: stuart_update
        arguments: -c .pytool/CISettings.py

    - template: templates/basetools-build-steps.yml
      parameters:
        tool_chain_tag: 'GCC5'

    - powershell: Get-ChildItem -Recurse -Include "*_path_env.yaml", "*_path_env.yml" -Path $(linux_build_output_path) | Remove-Item
      displayName: Remove Unnecessary Files

    - publish: $(linux_build_output_path)
      artifact: $(linux_artifact_name)
      displayName: Publish To Pipeline

  - job: windows_build
    displayName: Windows Build
    pool:
      vmImage: windows-latest

    workspace:
      clean: all

    steps:
    - checkout: self
      clean: true
  
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7.x'
        addToPath: true
        architecture: 'x64'
      displayName: Install correct Python

    - script: pip install -r requirements.txt --upgrade
      displayName: 'Install/Upgrade pip modules'

    # Set default
    - bash: |
        echo "##vso[task.setvariable variable=pkg_count]${{ 1 }}"

    - task: CmdLine@1
      displayName: Update Environment
      inputs:
        filename: stuart_update
        arguments: -c .pytool/CISettings.py

    - template: templates/basetools-build-steps.yml
      parameters:
        tool_chain_tag: 'VS2019'

    - powershell: Get-ChildItem -Recurse -Include "*_path_env.yaml", "*_path_env.yml" -Path $(windows_build_output_path) | Remove-Item
      displayName: Remove Unnecessary Files

    - publish: $(windows_build_output_path)
      artifact: $(windows_artifact_name)
      displayName: Publish To Pipeline

  - job: assemble_package
    displayName: Assemble Release Package
    dependsOn:
    - linux_build
    - windows_build
    pool:
      vmImage: windows-latest

    workspace:
      clean: all

    steps:
    - checkout: none

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7.x'
        addToPath: true
        architecture: 'x64'
      displayName: Install correct Python

    - powershell:
        $branch_url = '$(Build.SourceBranch)'.replace('refs/heads/', '');
        $config_source = 'https://raw.githubusercontent.com/microsoft/mu_basecore/'+$branch_url+'/BaseTools/NugetPublishing/Mu-Basetools.config.json';
        Write-Host $config_source;
        $config_dest = '$(Build.StagingDirectory)/NugetPackageConfig.json';
        (New-Object System.Net.WebClient).DownloadFile($config_source, $config_dest);
      displayName: Grab Nuget Config File

    - script: pip install edk2-pytool-library==0.10.* edk2-pytool-extensions==0.12.*
      displayName: 'Install/Upgrade pip modules'

    - download: current
      displayName: Grab Artifacts from Builds

    - powershell:
        mkdir $(Build.StagingDirectory)/$(temp_publication_directory);
        mv $(Pipeline.Workspace)/$(linux_artifact_name) $(Build.StagingDirectory)/$(temp_publication_directory)/Linux-x86;
        mv $(Pipeline.Workspace)/$(windows_artifact_name) $(Build.StagingDirectory)/$(temp_publication_directory)/Windows-x86;
      displayName: Stage Package Files

    - powershell:
        mkdir $(Build.StagingDirectory)/PackageOutput;
        nuget-publish --Operation Pack --OutputLog $(Build.StagingDirectory)/NugetPackagingLog.txt --ConfigFilePath $(Build.StagingDirectory)/NugetPackageConfig.json --InputFolderPath $(Build.StagingDirectory)/$(temp_publication_directory) --Version $(release_version) --OutputFolderPath $(Build.StagingDirectory)/PackageOutput;
        Get-Content $(Build.StagingDirectory)/NugetPackagingLog.txt;
      displayName: Nuget Packaging

    - publish: $(Build.StagingDirectory)/PackageOutput
      displayName: Publish the Package
      artifact: $(package_artifact_name)
